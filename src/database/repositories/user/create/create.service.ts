import { HttpException, HttpStatus, Injectable } from "@nestjs/common";
import type { CreateUserDto } from "src/api/user/sign-up/create-user.dto";
import { User } from "src/database/entities/user.entity";
import { postgresDataSource } from "src/database/data-souce";
import { CheckEmail } from "src/database/entities/check-email.entity";
import { SendMail } from "src/use-case/send-mail";

@Injectable()
export class CreateUserService {
    public autoGeneratedKey(): number {
        let randomKey = "";

        const LENGTH = 4;
        for (let i = 1; i <= LENGTH; i++) {
            randomKey = randomKey + Math.floor(Math.random() * (9 - 1 + 1) + 1); // eslint-disable-line
        }

        return Number(randomKey);
    }

    public async createCheckEmail(email: string): Promise<void> {
        const checkEmailRepository = postgresDataSource.getRepository(CheckEmail);

        const key = this.autoGeneratedKey();

        await new SendMail(email).sendKeyForCheckEmail(key);

        await checkEmailRepository.save({
            email,
            key,
        });
    }

    public async create(user: CreateUserDto): Promise<void> {
        const userRepository = postgresDataSource.getRepository(User);

        if (await userRepository.findOne({ where: { email: user.email } })) {
            throw new HttpException("User already exists", HttpStatus.CONFLICT);
        }

        await userRepository.save({
            ...user,
        });

        await this.createCheckEmail(user.email);
    }
}